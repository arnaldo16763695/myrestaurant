// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Categories {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  active    Boolean    @default(true)
  products  Products[]
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @updatedAt
}

model Products {
  id         String  @id @default(cuid())
  code       String?
  name       String     @db.VarChar(255)
  active     Boolean    @default(true)
  price      Float
  categoryId Int
  category   Categories @relation(fields: [categoryId], references: [id])
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  updatedAt  DateTime   @updatedAt
}

model User {
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  password  String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role      Role     @default(USER)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
